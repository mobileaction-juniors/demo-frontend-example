{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport { cleanDescription } from \"@/utils/CleanDescription\";\nexport default {\n  name: 'ma-keyword-generator',\n  data: function data() {\n    return {\n      inputText: ''\n    };\n  },\n  computed: {\n    oneGramKeywords: function oneGramKeywords() {\n      return this.generateNGramKeywords(this.inputText, 1);\n    },\n    twoGramKeywords: function twoGramKeywords() {\n      return this.generateNGramKeywords(this.inputText, 2);\n    },\n    threeGramKeywords: function threeGramKeywords() {\n      return this.generateNGramKeywords(this.inputText, 3);\n    }\n  },\n  /* Methods are:\r\n  * 1: generateNGramKeywords: This method takes two parameters, text and n. Text is the input text and n is the number of words in a keyword. This method returns an array of keywords.\r\n  * 2: cleanText: This method takes a text parameter and returns a cleaned text. It removes the leading and trailing spaces from the text.\r\n   */\n  methods: {\n    generateNGramKeywords: function generateNGramKeywords(text, n) {\n      var cleanedText = cleanDescription(text);\n      var words = cleanedText.split(/[\\s,.!]+/);\n      var keywords = [];\n      for (var i = 0; i <= words.length - n; i++) {\n        var ngram = words.slice(i, i + n).join(' ');\n        if (!keywords.includes(ngram)) {\n          keywords.push(ngram);\n        }\n      }\n      return keywords;\n    }\n  }\n};","map":{"version":3,"names":["cleanDescription","name","data","inputText","computed","oneGramKeywords","generateNGramKeywords","twoGramKeywords","threeGramKeywords","methods","text","n","cleanedText","words","split","keywords","i","length","ngram","slice","join","includes","push"],"sources":["src/pages/keyword-generator/KeywordGenerator.vue"],"sourcesContent":["\r\n<template>\r\n  <div class=\"ma-keywords-generator\">\r\n    <div class=\"ma-header\">\r\n      <span>Keyword Generator</span>\r\n    </div>\r\n    <div class=\"ma-content\">\r\n      <div class=\"ma-input\">\r\n        <label for=\"inputText\">Provide An Input Text:</label>\r\n        <textarea id=\"inputText\" v-model=\"inputText\" rows=\"5\"></textarea>\r\n      </div>\r\n      <div class=\"ma-generated-keywords\">\r\n        <div class=\"ma-keyword-section\">\r\n          <div class=\"ma-keyword-title\">1-gram Keywords:</div>\r\n          <div class=\"ma-keyword-list\">\r\n            <ul>\r\n              <li v-for=\"keyword in oneGramKeywords\" :key=\"keyword\">{{ keyword }}</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <div class=\"ma-keyword-section\">\r\n          <div class=\"ma-keyword-title\">2-gram Keywords:</div>\r\n          <div class=\"ma-keyword-list\">\r\n            <ul>\r\n              <li v-for=\"keyword in twoGramKeywords\" :key=\"keyword\">{{ keyword }}</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <div class=\"ma-keyword-section\">\r\n          <div class=\"ma-keyword-title\">3-gram Keywords:</div>\r\n          <div class=\"ma-keyword-list\">\r\n            <ul>\r\n              <li v-for=\"keyword in threeGramKeywords\" :key=\"keyword\">{{ keyword }}</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport {cleanDescription} from \"@/utils/CleanDescription\";\r\nexport default\r\n{\r\n  name: 'ma-keyword-generator',\r\n  data()\r\n  {\r\n    return {\r\n      inputText: '',\r\n    };\r\n  },\r\n  computed: {\r\n    oneGramKeywords() {\r\n      return this.generateNGramKeywords(this.inputText, 1);\r\n    },\r\n    twoGramKeywords() {\r\n      return this.generateNGramKeywords(this.inputText, 2);\r\n    },\r\n    threeGramKeywords() {\r\n      return this.generateNGramKeywords(this.inputText, 3);\r\n    },\r\n\r\n  },\r\n  /* Methods are:\r\n  * 1: generateNGramKeywords: This method takes two parameters, text and n. Text is the input text and n is the number of words in a keyword. This method returns an array of keywords.\r\n  * 2: cleanText: This method takes a text parameter and returns a cleaned text. It removes the leading and trailing spaces from the text.\r\n   */\r\n  methods: {\r\n    generateNGramKeywords(text, n) {\r\n      const cleanedText = cleanDescription(text);\r\n      const words = cleanedText.split(/[\\s,.!]+/);\r\n      const keywords = [];\r\n      for (let i = 0; i <= words.length - n; i++) {\r\n        const ngram = words.slice(i, i + n).join(' ');\r\n        if (!keywords.includes(ngram)) {\r\n          keywords.push(ngram);\r\n        }\r\n      }\r\n\r\n      return keywords;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add your custom styles here if needed */\r\n.ma-keywords-generator {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 15px;\r\n}\r\n\r\n.ma-header {\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.ma-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.ma-input {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.ma-input textarea {\r\n  width: 500px;\r\n  height: 200px;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  border: 1px solid #ccc;\r\n  resize: none;\r\n}\r\n\r\n.ma-generated-keywords {\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.ma-keyword-section {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 15px;\r\n}\r\n\r\n.ma-keyword-title {\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.ma-keyword-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.ma-keyword-list ul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.ma-keyword-list ul li {\r\n  margin-bottom: 5px;\r\n}\r\n\r\n\r\n</style>"],"mappings":";;;;;AA2CA,SAAAA,gBAAA;AACA,eACA;EACAC,IAAA;EACAC,IAAA,WAAAA,KAAA,EACA;IACA;MACAC,SAAA;IACA;EACA;EACAC,QAAA;IACAC,eAAA,WAAAA,gBAAA;MACA,YAAAC,qBAAA,MAAAH,SAAA;IACA;IACAI,eAAA,WAAAA,gBAAA;MACA,YAAAD,qBAAA,MAAAH,SAAA;IACA;IACAK,iBAAA,WAAAA,kBAAA;MACA,YAAAF,qBAAA,MAAAH,SAAA;IACA;EAEA;EACA;AACA;AACA;AACA;EACAM,OAAA;IACAH,qBAAA,WAAAA,sBAAAI,IAAA,EAAAC,CAAA;MACA,IAAAC,WAAA,GAAAZ,gBAAA,CAAAU,IAAA;MACA,IAAAG,KAAA,GAAAD,WAAA,CAAAE,KAAA;MACA,IAAAC,QAAA;MACA,SAAAC,CAAA,MAAAA,CAAA,IAAAH,KAAA,CAAAI,MAAA,GAAAN,CAAA,EAAAK,CAAA;QACA,IAAAE,KAAA,GAAAL,KAAA,CAAAM,KAAA,CAAAH,CAAA,EAAAA,CAAA,GAAAL,CAAA,EAAAS,IAAA;QACA,KAAAL,QAAA,CAAAM,QAAA,CAAAH,KAAA;UACAH,QAAA,CAAAO,IAAA,CAAAJ,KAAA;QACA;MACA;MAEA,OAAAH,QAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}