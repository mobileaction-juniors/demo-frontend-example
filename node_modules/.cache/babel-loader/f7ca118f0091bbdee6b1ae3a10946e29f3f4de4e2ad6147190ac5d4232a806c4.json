{"ast":null,"code":"import \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.trim.js\";\nexport default {\n  name: 'ma-keyword-generator',\n  data: function data() {\n    return {\n      inputText: ''\n    };\n  },\n  computed: {\n    oneGramKeywords: function oneGramKeywords() {\n      return this.generateNGramKeywords(this.inputText, 1);\n    },\n    twoGramKeywords: function twoGramKeywords() {\n      return this.generateNGramKeywords(this.inputText, 2);\n    },\n    threeGramKeywords: function threeGramKeywords() {\n      return this.generateNGramKeywords(this.inputText, 3);\n    }\n  },\n  methods: {\n    generateNGramKeywords: function generateNGramKeywords(text, n) {\n      var cleanedText = this.cleanText(text);\n      var words = cleanedText.split(' ');\n      var keywords = [];\n      for (var i = 0; i <= words.length - n; i++) {\n        var ngram = words.slice(i, i + n).join(' ');\n        if (!keywords.includes(ngram)) {\n          keywords.push(ngram);\n        }\n      }\n      return keywords;\n    },\n    cleanText: function cleanText(text) {\n      // Implement text cleaning logic here if required\n      // Remove special characters, punctuation, etc.\n      // Return the cleaned text\n      return text.trim();\n    }\n  }\n};","map":{"version":3,"names":["name","data","inputText","computed","oneGramKeywords","generateNGramKeywords","twoGramKeywords","threeGramKeywords","methods","text","n","cleanedText","cleanText","words","split","keywords","i","length","ngram","slice","join","includes","push","trim"],"sources":["src/pages/keyword-generator/KeywordGenerator.vue"],"sourcesContent":["<template>\r\n  <div class=\"ma-keywords-generator\">\r\n    <div class=\"ma-header\">\r\n      <span>Keyword Generator</span>\r\n    </div>\r\n    <div class=\"ma-content\">\r\n      <div class=\"ma-input\">\r\n        <label for=\"inputText\">Input Text:</label>\r\n        <textarea id=\"inputText\" v-model=\"inputText\" rows=\"5\"></textarea>\r\n      </div>\r\n      <div class=\"ma-generated-keywords\">\r\n        <div class=\"ma-keyword-section\">\r\n          <div class=\"ma-keyword-title\">1-gram Keywords:</div>\r\n          <div class=\"ma-keyword-list\">\r\n            <ul>\r\n              <li v-for=\"keyword in oneGramKeywords\" :key=\"keyword\">{{ keyword }}</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <div class=\"ma-keyword-section\">\r\n          <div class=\"ma-keyword-title\">2-gram Keywords:</div>\r\n          <div class=\"ma-keyword-list\">\r\n            <ul>\r\n              <li v-for=\"keyword in twoGramKeywords\" :key=\"keyword\">{{ keyword }}</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <div class=\"ma-keyword-section\">\r\n          <div class=\"ma-keyword-title\">3-gram Keywords:</div>\r\n          <div class=\"ma-keyword-list\">\r\n            <ul>\r\n              <li v-for=\"keyword in threeGramKeywords\" :key=\"keyword\">{{ keyword }}</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'ma-keyword-generator',\r\n  data() {\r\n    return {\r\n      inputText: '',\r\n    };\r\n  },\r\n  computed: {\r\n    oneGramKeywords() {\r\n      return this.generateNGramKeywords(this.inputText, 1);\r\n    },\r\n    twoGramKeywords() {\r\n      return this.generateNGramKeywords(this.inputText, 2);\r\n    },\r\n    threeGramKeywords() {\r\n      return this.generateNGramKeywords(this.inputText, 3);\r\n    },\r\n  },\r\n  methods: {\r\n    generateNGramKeywords(text, n) {\r\n      const cleanedText = this.cleanText(text);\r\n      const words = cleanedText.split(' ');\r\n      const keywords = [];\r\n\r\n      for (let i = 0; i <= words.length - n; i++) {\r\n        const ngram = words.slice(i, i + n).join(' ');\r\n        if (!keywords.includes(ngram)) {\r\n          keywords.push(ngram);\r\n        }\r\n      }\r\n\r\n      return keywords;\r\n    },\r\n    cleanText(text) {\r\n      // Implement text cleaning logic here if required\r\n      // Remove special characters, punctuation, etc.\r\n      // Return the cleaned text\r\n      return text.trim();\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add your custom styles here if needed */\r\n</style>\r\n"],"mappings":";;;;AAyCA;EACAA,IAAA;EACAC,IAAA,WAAAA,KAAA;IACA;MACAC,SAAA;IACA;EACA;EACAC,QAAA;IACAC,eAAA,WAAAA,gBAAA;MACA,YAAAC,qBAAA,MAAAH,SAAA;IACA;IACAI,eAAA,WAAAA,gBAAA;MACA,YAAAD,qBAAA,MAAAH,SAAA;IACA;IACAK,iBAAA,WAAAA,kBAAA;MACA,YAAAF,qBAAA,MAAAH,SAAA;IACA;EACA;EACAM,OAAA;IACAH,qBAAA,WAAAA,sBAAAI,IAAA,EAAAC,CAAA;MACA,IAAAC,WAAA,QAAAC,SAAA,CAAAH,IAAA;MACA,IAAAI,KAAA,GAAAF,WAAA,CAAAG,KAAA;MACA,IAAAC,QAAA;MAEA,SAAAC,CAAA,MAAAA,CAAA,IAAAH,KAAA,CAAAI,MAAA,GAAAP,CAAA,EAAAM,CAAA;QACA,IAAAE,KAAA,GAAAL,KAAA,CAAAM,KAAA,CAAAH,CAAA,EAAAA,CAAA,GAAAN,CAAA,EAAAU,IAAA;QACA,KAAAL,QAAA,CAAAM,QAAA,CAAAH,KAAA;UACAH,QAAA,CAAAO,IAAA,CAAAJ,KAAA;QACA;MACA;MAEA,OAAAH,QAAA;IACA;IACAH,SAAA,WAAAA,UAAAH,IAAA;MACA;MACA;MACA;MACA,OAAAA,IAAA,CAAAc,IAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}