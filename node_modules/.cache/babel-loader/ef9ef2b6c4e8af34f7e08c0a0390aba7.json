{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport { ref, reactive } from 'vue';\nexport default {\n  __name: 'KeywordGenerator',\n  setup: function setup(__props) {\n    var textInput = ref('');\n    var generatedKeywords = reactive({\n      \"1\": [],\n      \"2\": [],\n      \"3\": []\n    });\n\n    function generateKey() {\n      //slice empty space\n      var words = textInput.value.split(/\\s+/);\n      console.log(words); //generated words according to increased. I slice before space and I categorize 3 part according to number of words.\n\n      for (var n = 1; n <= 3; n++) {\n        var nGramKeywords = [];\n\n        for (var i = 0; i <= words.length - n; i++) {\n          var nGram = words.slice(i, i + n).join(\" \");\n          nGramKeywords.push(nGram);\n        }\n\n        generatedKeywords[n] = nGramKeywords;\n      }\n    }\n\n    return {\n      __sfc: true,\n      textInput: textInput,\n      generatedKeywords: generatedKeywords,\n      generateKey: generateKey,\n      ref: ref,\n      reactive: reactive\n    };\n  }\n};","map":{"version":3,"mappings":";;;;AAeA,SAASA,GAAT,EAAcC,QAAd,QAA8B,KAA9B;;;;IAEA,IAAMC,SAAS,GAAGF,GAAG,CAAC,EAAD,CAArB;IACA,IAAMG,iBAAiB,GAAGF,QAAQ,CAAC;MACjC,KAAK,EAD4B;MAEjC,KAAK,EAF4B;MAGjC,KAAK;IAH4B,CAAD,CAAlC;;IAMA,SAASG,WAAT,GAAuB;MACrB;MACA,IAAMC,KAAK,GAAGH,SAAS,CAACI,KAAV,CAAgBC,KAAhB,CAAsB,KAAtB,CAAd;MACAC,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EAHqB,CAKrB;;MACA,KAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;QAC3B,IAAMC,aAAa,GAAG,EAAtB;;QACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIP,KAAK,CAACQ,MAAN,GAAeH,CAApC,EAAuCE,CAAC,EAAxC,EAA4C;UAC1C,IAAME,KAAK,GAAGT,KAAK,CAACU,KAAN,CAAYH,CAAZ,EAAeA,CAAC,GAAGF,CAAnB,EAAsBM,IAAtB,CAA2B,GAA3B,CAAd;UACAL,aAAa,CAACM,IAAd,CAAmBH,KAAnB;QACD;;QACDX,iBAAiB,CAACO,CAAD,CAAjB,GAAuBC,aAAvB;MACD;IACF","names":["ref","reactive","textInput","generatedKeywords","generateKey","words","value","split","console","log","n","nGramKeywords","i","length","nGram","slice","join","push"],"sources":["KeywordGenerator.vue"],"sourcesContent":["<template>\n  <div>\n    <textarea v-model=\"textInput\" placeholder=\"Enter your text\"></textarea>\n    <button @click=\"generateKey\" >Generate Keywords</button>\n\n    <div v-for=\"(keywords, index) in generatedKeywords\" :key=\"index\">\n      <h3>{{ index }}-Gram Keywords:</h3>\n      <ul>\n        <li v-for=\"keyword in keywords\" :key=\"keyword\">{{ keyword }}</li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive } from 'vue';\n\nconst textInput = ref('');\nconst generatedKeywords = reactive({\n  \"1\": [],\n  \"2\": [],\n  \"3\": [],\n});\n\nfunction generateKey() {\n  //slice empty space\n  const words = textInput.value.split(/\\s+/);\n  console.log(words);\n\n  //generated words according to increased. I slice before space and I categorize 3 part according to number of words.\n  for (let n = 1; n <= 3; n++) {\n    const nGramKeywords = [];\n    for (let i = 0; i <= words.length - n; i++) {\n      const nGram = words.slice(i, i + n).join(\" \");\n      nGramKeywords.push(nGram);\n    }\n    generatedKeywords[n] = nGramKeywords;\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}